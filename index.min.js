const express=require("express"),nodeFetch=require("node-fetch"),app=express(),cache=new Map,cacheTtl=36E5;
function getType(b,a){b=b.split(".").pop().toLowerCase();return["html","htm"].includes(b)?a?"text/html":"text/plain":{js:"application/javascript",mjs:"application/javascript",json:"application/json",css:"text/css",xml:"application/xml",txt:"text/plain",text:"text/plain",md:"text/markdown",markdown:"text/markdown",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",svg:"image/svg+xml",webp:"image/webp",ico:"image/x-icon",bmp:"image/bmp",tif:"image/tiff",tiff:"image/tiff",mp4:"video/mp4",
webm:"video/webm",ogg:"video/ogg",mp3:"audio/mpeg",wav:"audio/wav",aac:"audio/aac",pdf:"application/pdf",zip:"application/zip",gz:"application/gzip",tar:"application/x-tar",rar:"application/x-rar-compressed","7z":"application/x-7z-compressed",woff:"font/woff",woff2:"font/woff2",ttf:"font/ttf",otf:"font/otf",eot:"application/vnd.ms-fontobject",wasm:"application/wasm",webmanifest:"application/manifest+json",rss:"application/rss+xml",atom:"application/atom+xml"}[b]||"application/octet-stream"}
async function handleGithub(b,a){const {user:k,repoAndBranchOrTag:m}=b.params,f=b.params[0],[h,l="main"]=m.split("@"),d=`https://raw.githubusercontent.com/${k}/${h}/${l}/${f}`;console.log(`fetching github: ${d}`);setCors(a);if(b.method==="OPTIONS")return a.sendStatus(200);const c=`github-${d}`,g=cache.get(c);if(g&&Date.now()-g.timestamp<cacheTtl)return console.log(`from cache: ${d}`),a.setHeader("Content-Type",g.type),a.setHeader("Cache-Control",`public, max-age=${cacheTtl/1E3}, immutable`),a.send(g.data);
try{const e=await fetch(d);if(!e.ok)return console.error(`github error: ${e.status}`),a.status(e.status).send(`cannot fetch ${f}`);const n=getType(f,"display"in b.query),p=await e.buffer();cache.set(c,{data:p,type:n,timestamp:Date.now()});a.setHeader("Content-Type",n);a.setHeader("Cache-Control","public, max-age=31536000, immutable");a.send(p)}catch(e){console.error("github fetch error:",e),a.status(500).send("server error")}}
async function handleNpm(b,a){const {packageName:k,packageVersion:m}=b.params,f=b.params[0],h=`https://unpkg.com/${k}@${m||"latest"}/${f}`;console.log(`fetching npm: ${h}`);setCors(a);if(b.method==="OPTIONS")return a.sendStatus(200);const l=`npm-${h}`,d=cache.get(l);if(d&&Date.now()-d.timestamp<cacheTtl)return console.log(`from cache: ${h}`),a.setHeader("Content-Type",d.type),a.setHeader("Cache-Control",`public, max-age=${cacheTtl/1E3}, immutable`),a.send(d.data);try{const c=await nodeFetch(h);if(!c.ok)return console.error(`npm error: ${c.status}`),
a.status(c.status).send(`cannot fetch ${k}/${f}`);const g=c.headers.get("Content-Type")||getType(f,"display"in b.query),e=await c.buffer();cache.set(l,{data:e,type:g,timestamp:Date.now()});a.setHeader("Content-Type",g);a.setHeader("Cache-Control","public, max-age=31536000, immutable");a.send(e)}catch(c){console.error("npm fetch error:",c),a.status(500).send("server error")}}
function setCors(b){b.setHeader("Access-Control-Allow-Origin","*");b.setHeader("Access-Control-Allow-Methods","GET, OPTIONS");b.setHeader("Access-Control-Allow-Headers","Content-Type, Authorization")}app.get("/github/:user/:repoAndBranchOrTag/*",handleGithub);app.get("/npm/:packageName@:packageVersion/*",handleNpm);app.get("/npm/:packageName/*",(b,a)=>{b.params.packageVersion="";handleNpm(b,a)});if(require.main===module){const b=process.env.PORT||3E3;app.listen(b,()=>{console.log(`listening on http://localhost:${b}`)})};
